$n: 'tw-reset';

.#{$n} {
  &,
  &::before,
  &::after {
    box-sizing: border-box;
    border-width: 0;
    border-style: solid;
    border-color: theme('borderColor.DEFAULT', currentcolor);

    // custom preflight defaults, since html or body tag won't be used
    text-size-adjust: 100%;
    tab-size: 4;
    font-family: theme(
      'fontFamily.sans',
      ui-sans-serif,
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      'Segoe UI',
      Roboto,
      'Helvetica Neue',
      Arial,
      'Noto Sans',
      sans-serif,
      'Apple Color Emoji',
      'Segoe UI Emoji',
      'Segoe UI Symbol',
      'Noto Color Emoji'
    );
    margin: 0;
    line-height: inherit;
  }

  &::before,
  &::after {
    --tw-content: '';
  }
}

html:where(.#{$n}) {
  line-height: 1.5;
  text-size-adjust: 100%;
  tab-size: 4;
  font-family: theme(
    'fontFamily.sans',
    ui-sans-serif,
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    'Helvetica Neue',
    Arial,
    'Noto Sans',
    sans-serif,
    'Apple Color Emoji',
    'Segoe UI Emoji',
    'Segoe UI Symbol',
    'Noto Color Emoji'
  );
  font-feature-settings: theme(
    'fontFamily.sans[1].fontFeatureSettings',
    normal
  );
  font-variation-settings: theme(
    'fontFamily.sans[1].fontVariationSettings',
    normal
  );
}

body:where(.#{$n}) {
  margin: 0;
  line-height: inherit;
}

hr:where(.#{$n}) {
  height: 0;
  color: inherit;
  border-top-width: 1px;
}

// todo: check if we can combine into one :where
abbr:where(.#{$n}:where([title])) {
  text-decoration: underline dotted;
}

@each $header in h1, h2, h3, h4, h5, h6 {
  #{$header}:where(.#{$n}) {
    font-size: inherit;
    font-weight: inherit;
  }
}

a:where(.#{$n}) {
  color: inherit;
  text-decoration: inherit;
}

@each $tag in b, strong {
  #{$tag}:where(.#{$n}) {
    font-weight: bolder;
  }
}

@each $tag in code, kbd, samp, pre {
  #{$tag}:where(.#{$n}) {
    font-family: theme(
      'fontFamily.mono',
      ui-monospace,
      SFMono-Regular,
      Menlo,
      Monaco,
      Consolas,
      'Liberation Mono',
      'Courier New',
      monospace
    );
    font-size: 1em;
  }
}

small:where(.#{$n}) {
  font-size: 80%;
}

@each $tag in sub, sup {
  #{$tag}:where(.#{$n}) {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
}

sub:where(.#{$n}) {
  bottom: -0.25em;
}

sup:where(.#{$n}) {
  top: -0.5em;
}

table:where(.#{$n}) {
  text-indent: 0;
  border-color: inherit;
  border-collapse: collapse;
}

@each $tag in button, input, optgroup, select, textarea {
  #{$tag}:where(.#{$n}) {
    font-family: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    font-size: 100%;
    font-weight: inherit;
    line-height: inherit;
    color: inherit;
    margin: 0;
    padding: 0;
  }
}

@each $tag in button, select {
  #{$tag}:where(.#{$n}) {
    text-transform: none;
  }
}

button:where(.#{$n}),
[type='button']:where(.#{$n}),
[type='reset']:where(.#{$n}),
[type='submit']:where(.#{$n}) {
  appearance: button;
  background-color: transparent;
  background-image: none;
}

:-moz-focusring:where(.#{$n}) {
  outline: auto;
}

:-moz-ui-invalid:where(.#{$n}) {
  box-shadow: none;
}

progress:where(.#{$n}) {
  vertical-align: baseline;
}

::-webkit-inner-spin-button:where(.#{$n}),
::-webkit-outer-spin-button:where(.#{$n}) {
  height: auto;
}

[type='search']:where(.#{$n}) {
  appearance: textfield;
  outline-offset: -2px;
}

::-webkit-search-decoration:where(.#{$n}) {
  appearance: none;
}

::-webkit-file-upload-button:where(.#{$n}) {
  appearance: button;
  font: inherit;
}

summary:where(.#{$n}) {
  display: list-item;
}

@each $tag in blockquote, dl, dd, h1, h2, h3, h4, h5, h6, hr, figure, p, pre {
  #{$tag}:where(.#{$n}) {
    margin: 0;
  }
}

fieldset:where(.#{$n}) {
  margin: 0;
  padding: 0;
}

legend:where(.#{$n}) {
  padding: 0;
}

@each $tag in ol, ul, menu {
  #{$tag}:where(.#{$n}) {
    list-style: none;
    margin: 0;
    padding: 0;
  }
}

dialog:where(.#{$n}) {
  padding: 0;
}

textarea:where(.#{$n}) {
  resize: vertical;
}

input:where(.#{$n})::placeholder,
textarea:where(.#{$n})::placeholder {
  opacity: 1;
  color: theme('colors.gray.400', #9ca3af);
}

button:where(.#{$n}),
[role='button']:where(.#{$n}) {
  cursor: pointer;
}

:disabled:where(.#{$n}) {
  cursor: default;
}

@each $tag in img, svg, video, canvas, audio, iframe, embed, object {
  #{$tag}:where(.#{$n}) {
    display: block;
    vertical-align: middle;
  }
}

@each $tag in img, video {
  #{$tag}:where(.#{$n}) {
    max-width: 100%;
    height: auto;
  }
}

[hidden]:where(.#{$n}) {
  display: none;
}
